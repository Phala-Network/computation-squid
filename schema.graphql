type GlobalState @entity {
  "constant 0"
  id: ID!
  height: Int!
  stakePoolValue: BigDecimal!
  vaultValue: BigDecimal!
  "excluded value vaults delegated to stake pools"
  totalValue: BigDecimal!
  "for average block time calculation"
  lastRecordedBlockHeight: Int!
  "for average block time calculation"
  lastRecordedBlockTime: DateTime!
  "in milliseconds during last 500 blocks"
  averageBlockTime: Int!
  "for apr calculation"
  idleWorkerShares: BigDecimal!
}

type TokenomicParameters @entity {
  "constant 0"
  id: ID!
  phaRate: BigDecimal!
  budgetPerBlock: BigDecimal!
  vMax: BigDecimal!
  treasuryRatio: BigDecimal!
  re: BigDecimal!
  k: BigDecimal!
}

enum IdentityLevel {
  Unknown
  FeePaid
  Reasonable
  KnownGood
  OutOfDate
  LowQuality
  Erroneous
}

type Account @entity {
  "account address"
  id: ID!
  vault: Vault @derivedFrom(field: "account")
  identityDisplay: String
  identityLevel: IdentityLevel!
  stakePoolValue: BigDecimal!
  stakePoolNftCount: Int!
  vaultValue: BigDecimal!
  vaultNftCount: Int!
}

enum BasePoolKind {
  Vault
  StakePool
}

type BasePool @entity {
  "pid"
  id: ID!
  "numeric pid for sorting"
  pid: BigInt!
  "NFT collection id"
  cid: Int!
  owner: Account!
  kind: BasePoolKind!
  "decimal percentage, 1 means 100%"
  commission: BigDecimal!
  # "any string, usually a stringified json"
  # description: String
  vault: Vault @derivedFrom(field: "basePool")
  stakePool: StakePool @derivedFrom(field: "basePool")
  totalShares: BigDecimal!
  totalValue: BigDecimal!
  sharePrice: BigDecimal!
  freeValue: BigDecimal!
  releasingValue: BigDecimal!
  withdrawalValue: BigDecimal!
  delegatorCount: Int!
  whitelistEnabled: Boolean!
  whitelists: [BasePoolWhitelist!] @derivedFrom(field: "basePool")
}

type Vault @entity {
  "pid"
  id: ID!
  basePool: BasePool! @unique
  account: Account! @unique
  apr: BigDecimal!
  "share price of owner's last gain"
  lastSharePriceCheckpoint: BigDecimal!
  claimableOwnerShares: BigDecimal!
}

type StakePool @entity {
  "pid"
  id: ID!
  basePool: BasePool! @unique
  "null means infinite"
  capacity: BigDecimal
  "null means infinite"
  delegable: BigDecimal
  aprMultiplier: BigDecimal!
  ownerReward: BigDecimal!
  workerCount: Int!
  idleWorkerCount: Int!
  idleWorkerShares: BigDecimal!
}

type Delegation @entity {
  "${pid}-${accountId}"
  id: ID!
  account: Account!
  basePool: BasePool!
  # value: BigDecimal!
  shares: BigDecimal!
  # withdrawalValue: BigDecimal!
  withdrawalShares: BigDecimal!
  withdrawalStartTime: DateTime
  delegationNft: DelegationNft
  withdrawalNft: DelegationNft
}

type DelegationNft @entity {
  "${collectionId}-${nftId}"
  id: ID!
  owner: Account!
  collectionId: Int!
  nftId: Int!
}

type BasePoolWhitelist @entity {
  "${pid}-${accountId}"
  id: ID!
  account: Account!
  basePool: BasePool!
  createTime: DateTime!
}

type Worker @entity {
  "worker public key"
  id: ID!
  stakePool: StakePool
  session: Session
  confidenceLevel: Int!
  initialScore: Int
  sMin: BigDecimal
  sMax: BigDecimal
  shares: BigDecimal
}

enum WorkerState {
  Ready
  WorkerIdle
  WorkerUnresponsive
  WorkerCoolingDown
}

type Session @entity {
  "session account address"
  id: ID!
  isBound: Boolean!
  stakePool: StakePool!
  worker: Worker!
  stake: BigDecimal!
  state: WorkerState!
  v: BigDecimal!
  ve: BigDecimal!
  pInit: Int!
  pInstant: Int!
  totalReward: BigDecimal!
  coolingDownStartTime: DateTime
}
