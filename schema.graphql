type GlobalState @entity {
  "constant 0"
  id: ID!
  height: Int!
  totalValue: BigDecimal!
  averageBlockTimeUpdatedHeight: Int!
  averageBlockTimeUpdatedTime: DateTime!
  snapshotUpdatedTime: DateTime!
  averageBlockTime: Int!
  averageAprMultiplier: BigDecimal!
  averageApr: BigDecimal!
  "for apr calculation"
  idleWorkerShares: BigDecimal!
  cumulativeRewards: BigDecimal!

  phaRate: BigDecimal!
  budgetPerBlock: BigDecimal!
  tokenomicUpdatedTime: DateTime!
  vMax: BigDecimal!
  treasuryRatio: BigDecimal!
  re: BigDecimal!
  k: BigDecimal!

  workerCount: Int!
  idleWorkerCount: Int!
  budgetPerShare: BigDecimal!
  delegatorCount: Int!

  withdrawalDustCleared: Boolean
}

enum IdentityJudgement {
  Unknown
  FeePaid
  Reasonable
  KnownGood
  OutOfDate
  LowQuality
  Erroneous
}

type Account @entity {
  "account address"
  id: ID!
  basePool: BasePool @derivedFrom(field: "account")
  identityDisplay: String @index
  identityLevel: IdentityJudgement
  identityJudgements: [IdentityJudgement!]
  stakePoolValue: BigDecimal!
  stakePoolNftCount: Int!
  stakePoolAvgAprMultiplier: BigDecimal!
  vaultValue: BigDecimal!
  vaultNftCount: Int!
  vaultAvgAprMultiplier: BigDecimal!
  ownedPools: [BasePool!] @derivedFrom(field: "owner")
  cumulativeStakePoolOwnerRewards: BigDecimal!
  cumulativeVaultOwnerRewards: BigDecimal!
}

enum BasePoolKind {
  Vault
  StakePool
}

type BasePool @entity {
  "pid"
  id: ID!
  "numeric pid for sorting"
  pid: BigInt! @index
  "NFT collection id"
  cid: Int!
  owner: Account!
  account: Account! @unique
  kind: BasePoolKind! @index
  "decimal percentage, 1 means 100%"
  commission: BigDecimal!
  vault: Vault @derivedFrom(field: "basePool")
  stakePool: StakePool @derivedFrom(field: "basePool")
  aprMultiplier: BigDecimal! @index
  totalShares: BigDecimal!
  totalValue: BigDecimal! @index
  sharePrice: BigDecimal!
  freeValue: BigDecimal!
  releasingValue: BigDecimal!
  withdrawingValue: BigDecimal!
  withdrawingShares: BigDecimal!
  delegatorCount: Int!
  whitelistEnabled: Boolean! @index
  whitelists: [BasePoolWhitelist!] @derivedFrom(field: "basePool")
  delegations: [Delegation!] @derivedFrom(field: "basePool")
  cumulativeOwnerRewards: BigDecimal!
}

type Vault @entity {
  "pid"
  id: ID!
  basePool: BasePool! @unique
  "share price of owner's last gain"
  lastSharePriceCheckpoint: BigDecimal!
  claimableOwnerShares: BigDecimal!
}

type StakePool @entity {
  "pid"
  id: ID!
  basePool: BasePool! @unique
  "null means infinite"
  capacity: BigDecimal
  "null means infinite"
  delegable: BigDecimal
  ownerReward: BigDecimal!
  workerCount: Int!
  idleWorkerCount: Int!
  idleWorkerShares: BigDecimal!
  workers: [Worker!]! @derivedFrom(field: "stakePool")
}

type Delegation @entity @index(fields: ["basePool", "account"], unique: true) {
  "${pid}-${accountId}"
  id: ID!
  account: Account!
  basePool: BasePool!
  value: BigDecimal!
  cost: BigDecimal!
  shares: BigDecimal!
  withdrawingValue: BigDecimal!
  withdrawingShares: BigDecimal!
  withdrawalStartTime: DateTime
  delegationNft: Nft @unique
  withdrawalNft: Nft @unique
}

type Nft @entity @index(fields: ["cid", "nftId"], unique: true) {
  "${cid}-${nftId}"
  id: ID!
  owner: Account!
  cid: Int!
  nftId: Int!
  mintTime: DateTime
  delegation: Delegation @derivedFrom(field: "delegationNft")
}

type BasePoolWhitelist @entity @index(fields: ["basePool", "createTime"]) {
  "${pid}-${accountId}"
  id: ID!
  account: Account!
  basePool: BasePool!
  createTime: DateTime!
}

type Worker @entity {
  "worker public key"
  id: ID!
  stakePool: StakePool
  session: Session @derivedFrom(field: "worker")
  confidenceLevel: Int!
  initialScore: Int
}

enum WorkerState {
  Ready
  WorkerIdle
  WorkerUnresponsive
  WorkerCoolingDown
}

type Session @entity {
  "session account address"
  id: ID!
  worker: Worker @unique
  stake: BigDecimal!
  state: WorkerState!
  v: BigDecimal!
  ve: BigDecimal!
  pInit: Int!
  pInstant: Int!
  totalReward: BigDecimal!
  coolingDownStartTime: DateTime
  shares: BigDecimal!
}

type AccountSnapshot
  @entity
  @index(fields: ["account", "updatedTime"], unique: true) {
  id: ID!
  "block time"
  updatedTime: DateTime!
  account: String!
  delegationValue: BigDecimal!
  cumulativeStakePoolOwnerRewards: BigDecimal!
  cumulativeVaultOwnerRewards: BigDecimal!
}

type BasePoolSnapshot
  @entity
  @index(fields: ["basePool", "updatedTime"], unique: true) {
  id: ID!
  "block time"
  updatedTime: DateTime!
  basePool: String!
  commission: BigDecimal!
  apr: BigDecimal!
  totalShares: BigDecimal!
  totalValue: BigDecimal!
  sharePrice: BigDecimal!
  freeValue: BigDecimal!
  releasingValue: BigDecimal!
  withdrawingValue: BigDecimal!
  withdrawingShares: BigDecimal!
  delegatorCount: Int!
  workerCount: Int
  idleWorkerCount: Int
  stakePoolCount: Int
  cumulativeOwnerRewards: BigDecimal!
}

type GlobalStateSnapshot @entity {
  id: ID!
  "block time"
  height: Int! @index
  updatedTime: DateTime! @index
  totalValue: BigDecimal!
  averageBlockTime: Int!
  averageApr: BigDecimal!
  idleWorkerShares: BigDecimal!
  cumulativeRewards: BigDecimal!
  budgetPerBlock: BigDecimal!
  workerCount: Int!
  idleWorkerCount: Int!
  budgetPerShare: BigDecimal!
  delegatorCount: Int!
}

type DelegationSnapshot
  @entity
  @index(fields: ["delegation", "updatedTime"], unique: true) {
  id: ID!
  "block time"
  updatedTime: DateTime!
  delegation: String!
  cost: BigDecimal!
  value: BigDecimal!
}

type WorkerSnapshot
  @entity
  @index(fields: ["worker", "updatedTime"], unique: true) {
  id: ID!
  "block time"
  updatedTime: DateTime!
  worker: String!
  stakePool: String!
  session: String!
  confidenceLevel: Int!
  initialScore: Int
  stake: BigDecimal!
  state: WorkerState!
  v: BigDecimal!
  ve: BigDecimal!
  pInit: Int!
  pInstant: Int!
  totalReward: BigDecimal!
}
